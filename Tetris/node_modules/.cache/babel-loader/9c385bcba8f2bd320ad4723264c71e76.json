{"ast":null,"code":"import { defaultCell } from \"./Cell\";\nexport const buildBoard = _ref => {\n  let {\n    rows,\n    columns\n  } = _ref;\n  const builtRows = Array.from({\n    length: rows\n  }, () => Array.from({\n    length: columns\n  }, () => ({\n    ...defaultCell\n  })));\n  return {\n    rows: builtRows,\n    size: {\n      rows,\n      columns\n    }\n  };\n};\nexport const nextBoard = _ref2 => {\n  let {\n    board,\n    player,\n    resetPlayer,\n    addLinesCleared\n  } = _ref2;\n  const {\n    tetromino,\n    position\n  } = player;\n\n  // Copy and clear spaces used by pieces that\n  // hadn't collided and occupied spaces permanently\n  let rows = board.rows.map(row => row.map(cell => cell.occupied ? cell : {\n    ...defaultCell\n  }));\n\n  // Drop position\n  const dropPosition = findDropPosition({\n    board,\n    position,\n    shape: tetromino.shape\n  });\n  rows = transferToBoard({\n    className,\n    isOccupied: player.isFastDropping,\n    position: dropPosition,\n    rows,\n    shape: tetromino.shape\n  });\n};","map":{"version":3,"names":["defaultCell","buildBoard","rows","columns","builtRows","Array","from","length","size","nextBoard","board","player","resetPlayer","addLinesCleared","tetromino","position","map","row","cell","occupied","dropPosition","findDropPosition","shape","transferToBoard","className","isOccupied","isFastDropping"],"sources":["C:/Sachin's folder/Programming/HTML/React/reactjs/src/business/Board.js"],"sourcesContent":["import { defaultCell } from \"./Cell\";\r\nexport const buildBoard = ({ rows, columns }) => {\r\n\r\n  const builtRows = Array.from({ length: rows }, () =>\r\n    Array.from({ length: columns }, () => ({ ...defaultCell }))\r\n  );\r\n  \r\n  return {\r\n    rows: builtRows,\r\n    size: { rows, columns },\r\n  };\r\n};\r\nexport const nextBoard = ({ board, player, resetPlayer, addLinesCleared }) => {\r\n  const { tetromino, position } = player;\r\n\r\n  // Copy and clear spaces used by pieces that\r\n  // hadn't collided and occupied spaces permanently\r\n  let rows = board.rows.map((row) =>\r\n    row.map((cell) => (cell.occupied ? cell : { ...defaultCell }))\r\n  );\r\n\r\n  // Drop position\r\n  const dropPosition = findDropPosition({\r\n    board,\r\n    position,\r\n    shape: tetromino.shape\r\n  });\r\n  rows = transferToBoard({\r\n    className,\r\n    isOccupied: player.isFastDropping,\r\n    position: dropPosition,\r\n    rows,\r\n    shape: tetromino.shape\r\n  });\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,QAAQ;AACpC,OAAO,MAAMC,UAAU,GAAG,QAAuB;EAAA,IAAtB;IAAEC,IAAI;IAAEC;EAAQ,CAAC;EAE1C,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEL;EAAK,CAAC,EAAE,MAC7CG,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEJ;EAAQ,CAAC,EAAE,OAAO;IAAE,GAAGH;EAAY,CAAC,CAAC,CAAC,CAC5D;EAED,OAAO;IACLE,IAAI,EAAEE,SAAS;IACfI,IAAI,EAAE;MAAEN,IAAI;MAAEC;IAAQ;EACxB,CAAC;AACH,CAAC;AACD,OAAO,MAAMM,SAAS,GAAG,SAAqD;EAAA,IAApD;IAAEC,KAAK;IAAEC,MAAM;IAAEC,WAAW;IAAEC;EAAgB,CAAC;EACvE,MAAM;IAAEC,SAAS;IAAEC;EAAS,CAAC,GAAGJ,MAAM;;EAEtC;EACA;EACA,IAAIT,IAAI,GAAGQ,KAAK,CAACR,IAAI,CAACc,GAAG,CAAEC,GAAG,IAC5BA,GAAG,CAACD,GAAG,CAAEE,IAAI,IAAMA,IAAI,CAACC,QAAQ,GAAGD,IAAI,GAAG;IAAE,GAAGlB;EAAY,CAAE,CAAC,CAC/D;;EAED;EACA,MAAMoB,YAAY,GAAGC,gBAAgB,CAAC;IACpCX,KAAK;IACLK,QAAQ;IACRO,KAAK,EAAER,SAAS,CAACQ;EACnB,CAAC,CAAC;EACFpB,IAAI,GAAGqB,eAAe,CAAC;IACrBC,SAAS;IACTC,UAAU,EAAEd,MAAM,CAACe,cAAc;IACjCX,QAAQ,EAAEK,YAAY;IACtBlB,IAAI;IACJoB,KAAK,EAAER,SAAS,CAACQ;EACnB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module"}